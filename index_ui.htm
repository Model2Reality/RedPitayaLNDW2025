<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Beam Position Monitoring | RedPitaya</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        :root {
            --bg-color: #f8f9fa;
            --text-color: #212529;
            --primary: #0d6efd;
            --error: #dc3545;
            --grid-color: rgba(0, 0, 0, 0.05);
        }

        body {
            font-family: 'Segoe UI', Roboto, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            margin: 0;
            padding: 20px;
            line-height: 1.6;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
        }

        header {
            margin-bottom: 2rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--grid-color);
        }

        h1 {
            font-weight: 500;
            font-size: 1.8rem;
            margin: 0;
        }

        .status {
            display: flex;
            align-items: center;
            margin-top: 1rem;
            font-family: monospace;
        }

        .status-indicator {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-right: 8px;
            background: #6c757d;
        }

        .status-indicator.connected {
            background: var(--primary);
        }

        .dashboard {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        @media (max-width: 768px) {
            .dashboard {
                grid-template-columns: 1fr;
            }
        }

        .panel {
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .panel-header {
            margin-bottom: 1.5rem;
        }

        .panel-title {
            font-weight: 500;
            font-size: 1.2rem;
            margin: 0 0 0.5rem 0;
        }

        .data-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
            margin-top: 1.5rem;
        }

        .data-value {
            font-size: 1.8rem;
            font-weight: 500;
            margin: 0.5rem 0;
            font-variant-numeric: tabular-nums;
        }

        .error-panel {
            background-color: #fff8f8;
            border-left: 4px solid var(--error);
            padding: 1rem;
            margin: 2rem 0;
            font-family: monospace;
        }

        button {
            background: var(--primary);
            color: white;
            border: none;
            border-radius: 4px;
            padding: 0.6rem 1rem;
            font-size: 0.9rem;
            cursor: pointer;
            margin-top: 1rem;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Beam Position Monitoring</h1>
            <div class="status">
                <div class="status-indicator" id="statusIndicator"></div>
                <span id="statusText">Connecting to RedPitaya...</span>
            </div>
        </header>

        <div class="dashboard">
            <div class="panel">
                <div class="panel-header">
                    <h2 class="panel-title">Beam Position</h2>
                    <p>Real-time XY coordinates</p>
                </div>
                <div style="height: 300px;">
                    <canvas id="positionChart"></canvas>
                </div>
                <div class="data-grid">
                    <div>
                        <p>X Position</p>
                        <div class="data-value" id="xPosValue">-</div>
                    </div>
                    <div>
                        <p>Y Position</p>
                        <div class="data-value" id="yPosValue">-</div>
                    </div>
                </div>
            </div>

            <div class="panel">
                <div class="panel-header">
                    <h2 class="panel-title">Position History</h2>
                    <p>X-axis movement over time</p>
                </div>
                <div style="height: 300px;">
                    <canvas id="historyChart"></canvas>
                </div>
                <div class="data-grid">
                    <div>
                        <p>Max Deviation</p>
                        <div class="data-value" id="deviationValue">-</div>
                    </div>
                    <div>
                        <p>Stability</p>
                        <div class="data-value" id="stabilityValue">-</div>
                    </div>
                </div>
            </div>
        </div>

        <div class="error-panel" id="errorPanel" style="display: none;">
            <h3>Connection Error</h3>
            <p id="errorDetails"></p>
            <button id="retryBtn">Retry Connection</button>
        </div>
    </div>

    <script>
        // Chart instances
        let positionChart, historyChart;
        let socket;
        let positionHistory = [];
        const maxHistoryLength = 100;

        function initCharts() {
            // Position Chart (XY Scatter)
            positionChart = new Chart(
                document.getElementById('positionChart').getContext('2d'),
                {
                    type: 'scatter',
                    data: {
                        datasets: [{
                            label: 'Beam Position',
                            data: [],
                            backgroundColor: 'rgba(13, 110, 253, 0.7)',
                            borderColor: 'rgba(13, 110, 253, 1)',
                            borderWidth: 1,
                            pointRadius: 8
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            x: {
                                type: 'linear',
                                position: 'center',
                                min: -1,
                                max: 1,
                                grid: { color: 'rgba(0, 0, 0, 0.05)' },
                                ticks: {
                                    callback: value => value.toFixed(1)
                                }
                            },
                            y: {
                                type: 'linear',
                                position: 'center',
                                min: -1,
                                max: 1,
                                grid: { color: 'rgba(0, 0, 0, 0.05)' },
                                ticks: {
                                    callback: value => value.toFixed(1)
                                }
                            }
                        },
                        plugins: {
                            legend: { display: false },
                            tooltip: {
                                callbacks: {
                                    label: ctx => `X: ${ctx.parsed.x.toFixed(3)}, Y: ${ctx.parsed.y.toFixed(3)}`
                                }
                            }
                        }
                    }
                }
            );

            // History Chart (Line)
            historyChart = new Chart(
                document.getElementById('historyChart').getContext('2d'),
                {
                    type: 'line',
                    data: {
                        labels: Array(maxHistoryLength).fill(''),
                        datasets: [{
                            data: [],
                            borderColor: 'rgba(13, 110, 253, 1)',
                            borderWidth: 2,
                            tension: 0.1,
                            fill: false,
                            pointRadius: 0
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            x: { display: false },
                            y: {
                                min: -1,
                                max: 1,
                                grid: { color: 'rgba(0, 0, 0, 0.05)' }
                            }
                        },
                        plugins: { legend: { display: false } }
                    }
                }
            );
        }

        function connectWebSocket() {
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const host = window.location.host;
            socket = new WebSocket(`${protocol}//${host}/ws`);

            socket.onopen = () => {
                document.getElementById('statusIndicator').classList.add('connected');
                document.getElementById('statusText').textContent = 'Connected to RedPitaya';
                document.getElementById('errorPanel').style.display = 'none';
            };

            socket.onmessage = (event) => {
                try {
                    const data = JSON.parse(event.data);
                    updateUI(data);
                } catch (e) {
                    console.error('Error parsing WebSocket message:', e);
                }
            };

            socket.onerror = (error) => {
                console.error('WebSocket error:', error);
                showError('WebSocket connection error');
            };

            socket.onclose = () => {
                document.getElementById('statusIndicator').classList.remove('connected');
                document.getElementById('statusText').textContent = 'Disconnected';
                showError('Connection to RedPitaya lost');
            };
        }

        function updateUI(data) {
            // Update position chart
            positionChart.data.datasets[0].data = [{x: data.x, y: data.y}];
            positionChart.update();
            
            // Update history chart
            positionHistory.push(data.x);
            if (positionHistory.length > maxHistoryLength) {
                positionHistory.shift();
            }
            historyChart.data.datasets[0].data = [...positionHistory];
            historyChart.update();
            
            // Update displayed values
            document.getElementById('xPosValue').textContent = data.x.toFixed(3);
            document.getElementById('yPosValue').textContent = data.y.toFixed(3);
            document.getElementById('stabilityValue').textContent = data.stability.toFixed(1);
            
            // Calculate max deviation
            const deviation = Math.max(...positionHistory.map(Math.abs));
            document.getElementById('deviationValue').textContent = deviation.toFixed(3);
        }

        function showError(message) {
            document.getElementById('errorDetails').textContent = message;
            document.getElementById('errorPanel').style.display = 'block';
        }

        // Initialize
        document.addEventListener('DOMContentLoaded', () => {
            initCharts();
            connectWebSocket();
            
            document.getElementById('retryBtn').addEventListener('click', () => {
                connectWebSocket();
            });
        });
    </script>
</body>
</html>
