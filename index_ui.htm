<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RedPitaya Beam Monitoring</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background: #f5f5f5;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        .panel {
            background: white;
            border-radius: 5px;
            padding: 15px;
            margin-bottom: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        canvas {
            width: 100%;
            height: 300px;
        }
        .status {
            padding: 10px;
            background: #eee;
            border-radius: 5px;
            margin-bottom: 15px;
        }
        .error {
            color: red;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>RedPitaya Beam Monitoring</h1>
        
        <div class="status">
            Status: <span id="connectionStatus">Verbindung wird hergestellt...</span>
        </div>

        <div class="panel">
            <h2>Beam Position</h2>
            <canvas id="positionChart"></canvas>
            <div>
                X: <span id="xPos">0.000</span> | 
                Y: <span id="yPos">0.000</span> | 
                Stability: <span id="stability">100.0</span>%
            </div>
        </div>

        <div class="panel">
            <h2>Position History</h2>
            <canvas id="historyChart"></canvas>
        </div>

        <div id="errorPanel" class="error" style="display: none;"></div>
    </div>

    <script>
        // Charts initialisieren
        const posCtx = document.getElementById('positionChart').getContext('2d');
        const histCtx = document.getElementById('historyChart').getContext('2d');
        
        const positionChart = new Chart(posCtx, {
            type: 'scatter',
            data: { datasets: [{
                label: 'Beam Position',
                data: [{x: 0, y: 0}],
                backgroundColor: 'rgba(75, 192, 192, 1)'
            }]},
            options: {
                scales: {
                    x: { type: 'linear', min: -1, max: 1 },
                    y: { type: 'linear', min: -1, max: 1 }
                }
            }
        });

        const historyChart = new Chart(histCtx, {
            type: 'line',
            data: { datasets: [{
                label: 'X Position',
                data: [],
                borderColor: 'rgba(54, 162, 235, 1)'
            }]}
        });

        // WebSocket-Verbindung
        let socket;
        let reconnectAttempts = 0;
        const maxReconnectAttempts = 5;

        function connect() {
            const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            socket = new WebSocket(`${wsProtocol}//${window.location.host}/ws`);
            
            socket.onopen = () => {
                reconnectAttempts = 0;
                updateStatus('Verbunden mit RedPitaya', 'green');
            };
            
            socket.onmessage = (event) => {
                const parts = event.data.split(',');
                if(parts.length === 3) {
                    const x = parseFloat(parts[0]);
                    const y = parseFloat(parts[1]);
                    const stability = parseFloat(parts[2]);
                    
                    updateCharts(x, y, stability);
                }
            };
            
            socket.onerror = (error) => {
                showError(`Verbindungsfehler: ${error.message}`);
            };
            
            socket.onclose = () => {
                if(reconnectAttempts < maxReconnectAttempts) {
                    reconnectAttempts++;
                    setTimeout(connect, 2000);
                    updateStatus(`Neuverbindung versucht (${reconnectAttempts}/${maxReconnectAttempts})`, 'orange');
                } else {
                    updateStatus('Verbindung verloren', 'red');
                }
            };
        }

        function updateCharts(x, y, stability) {
            // Position Chart
            positionChart.data.datasets[0].data = [{x, y}];
            positionChart.update();
            
            // History Chart
            historyChart.data.datasets[0].data.push({x: Date.now(), y: x});
            if(historyChart.data.datasets[0].data.length > 50) {
                historyChart.data.datasets[0].data.shift();
            }
            historyChart.update();
            
            // Werte anzeigen
            document.getElementById('xPos').textContent = x.toFixed(3);
            document.getElementById('yPos').textContent = y.toFixed(3);
            document.getElementById('stability').textContent = stability.toFixed(1);
        }

        function updateStatus(message, color) {
            const status = document.getElementById('connectionStatus');
            status.textContent = message;
            status.style.color = color;
        }

        function showError(message) {
            const errorPanel = document.getElementById('errorPanel');
            errorPanel.textContent = message;
            errorPanel.style.display = 'block';
        }

        // Verbindung starten
        connect();
    </script>
</body>
</html>
